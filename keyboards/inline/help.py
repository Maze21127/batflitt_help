from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton


KEYBOARD = {
    "charge": {
        "ru": "–ù–µ –∑–∞—Ä—è–∂–∞–µ—Ç",
        "en": "Not charging",
        "la": "NeuzlƒÅdƒì"
    },
    "back": {
        "ru": "–ù–µ –º–æ–≥—É –≤–µ—Ä–Ω—É—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
        "en": "Can't back Power Bank",
        "la": "Nevaru nodot atpakaƒº ierƒ´ci"
    },
    "wire": {
        "ru": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–≤–æ–¥–æ–º",
        "en": "Wire issue",
        "la": "Vada problƒìma"
    },
    "changeback": {
        "ru": "–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤",
        "en": "Money refund",
        "la": "Naudas atmaksa"
    },
    "debited_money": {
        "ru": "–°–ø–∏—Å–∞–ª–∏—Å—å –¥–µ–Ω—å–≥–∏ –∑–∞ –ø–æ—Ç–µ—Ä—é",
        "en": "Money written off for loss",
        "la": "Iekasƒìta nauda par nozaudƒì≈°anu"
    },
    "cooperation": {
        "ru": "–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ",
        "en": "Cooperation",
        "la": "Sadarbƒ´ba"
    },
    "other": {
        "ru": "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞",
        "en": "Other issue",
        "la": "Cita problƒìma"
    }
}

IS_HELPFUL_KEYBOARD = {
    "yes": {
        "ru": "–î–∞",
        "en": "Yes",
        "la": "JƒÅ"
    },
    "no": {
        "ru": "–ù–µ—Ç",
        "en": "No",
        "la": "Nƒì"
    }
}


CLOSE_CHAT_KEYBOARD = {
    "ru": "–í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞",
    "en": "Close chat",
    "la": "Aizvƒìrt tƒìrzƒì≈°anas re≈æƒ´mu"
}

SEND_PHONE_KEYBOARD = {
    "phone_number": {
        "ru": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±",
        "en": "Send phone number üì±",
        "la": "Nos≈´tƒ´t tƒÅlru≈Üa numuru üì±"
    },
    "cancel": {
        "ru": "–û—Ç–º–µ–Ω–∞",
        "en": "Cancel",
        "la": "Atcelt"
    }
}

CANCEL_KEYBOARD = {
    "ru": "–û—Ç–º–µ–Ω–∞",
    "en": "Cancel",
    "la": "Atcelt"
}

DONT_SCORE_KEYBOARD = {
    "ru": "–ù–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å",
    "en": "Don't Score",
    "la": ""
}

LANGUAGES = {
    "ru": "Russian üá∑üá∫",
    "en": "English üá∫üá∏",
    "la": "Latvija üá±üáª",
}

LANGUAGES_KEYBOARD = InlineKeyboardMarkup()
for key, value in LANGUAGES.items():
    LANGUAGES_KEYBOARD.add(InlineKeyboardButton(value, callback_data=key))


def get_start_keyboard(language: str):
    keyboard = InlineKeyboardMarkup()
    language = language if language in KEYBOARD['charge'].keys() else "en"
    for key, value in KEYBOARD.items():
        keyboard.add(InlineKeyboardButton(f"{value[language]}", callback_data=key))
    return keyboard


def get_is_helpful_keyboard(language: str):
    keyboard = InlineKeyboardMarkup()
    language = language if language in IS_HELPFUL_KEYBOARD['yes'].keys() else "en"
    for key, value in IS_HELPFUL_KEYBOARD.items():
        keyboard.add(InlineKeyboardButton(f"{value[language]}", callback_data=key))
    return keyboard


def get_close_chat_keyboard(language: str):
    keyboard = InlineKeyboardMarkup()
    language = language if language in CLOSE_CHAT_KEYBOARD.keys() else "en"
    keyboard.add(InlineKeyboardButton(CLOSE_CHAT_KEYBOARD[language], callback_data='close_chat'))
    return keyboard





def get_cancel_keyboard(language: str):
    keyboard = InlineKeyboardMarkup()
    language = language if language in CANCEL_KEYBOARD.keys() else "en"
    keyboard.add(InlineKeyboardButton(CANCEL_KEYBOARD[language], callback_data='cancel'))
    return keyboard


def get_score_keyboard(language: str):
    score_keyboard = InlineKeyboardMarkup()
    language = language if language in DONT_SCORE_KEYBOARD.keys() else "en"
    for i in range(1, 6):
        score_keyboard.add(InlineKeyboardButton(str(i), callback_data=f"Score:{i}"))
    score_keyboard.add(InlineKeyboardButton(DONT_SCORE_KEYBOARD[language], callback_data='Score:0'))

    return score_keyboard


GET_CUSTOMER_KEYBOARD = InlineKeyboardMarkup()
GET_CUSTOMER_KEYBOARD.add(InlineKeyboardButton("–í–∑—è—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É", callback_data='get_request'))
